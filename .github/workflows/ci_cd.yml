name: CI/CD for Terraform and Ansible

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    outputs:
      vm_ip: ${{ steps.get_ip.outputs.vm_ip }}
    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Шаг 3: Инициализация Terraform
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init

      # Шаг 4: Планирование Terraform
      - name: Terraform Plan
        env:
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        working-directory: ./terraform
        run: terraform plan

      # Шаг 5: Применение Terraform
      - name: Terraform Apply
        env:
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        working-directory: ./terraform
        run: terraform apply -auto-approve

      # Шаг 6: Получение IP-адреса VM с фильтрацией и очисткой вывода
      - name: Get VM Public IP
        id: get_ip
        working-directory: ./terraform
        run: |
          RAW_OUTPUT=$(terraform output -raw vm_public_ip)
          echo "Raw output: $RAW_OUTPUT"
          # Извлекаем первый совпадающий IP-адрес, очищаем пробелы/новые строки
          VM_IP=$(echo "$RAW_OUTPUT" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1 | xargs)
          if [[ ! $VM_IP =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
            echo "Error: Invalid IP format - $VM_IP"
            exit 1
          fi
          # Записываем IP как output для задачи terraform
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT

      # Шаг 7: Отладка IP
      - name: Debug VM IP
        run: echo "VM IP:${{ steps.get_ip.outputs.vm_ip }}"

  ansible:
    name: Ansible Playbook
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Ansible
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      # Шаг 3: Конфигурация SSH
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ needs.terraform.outputs.vm_ip }} >> ~/.ssh/known_hosts

      # Шаг 4: Обновление инвентаря Ansible
      - name: Update Ansible Inventory
        run: |
          echo "[webserver]" > ansible/inventory.ini
          echo "${{ needs.terraform.outputs.vm_ip }} ansible_user=anastasiatobohova ansible_ssh_private_key_file=~/.ssh/id_ed25519" >> ansible/inventory.ini

      # Шаг 5: Отключение проверки ключей SSH
      - name: Disable SSH Host Key Checking
        run: echo "export ANSIBLE_HOST_KEY_CHECKING=False" >> $GITHUB_ENV

      # Шаг 6: Выполнение Ansible Playbook
      - name: Run Ansible Playbook
        run: ansible-playbook ansible/playbook.yml -i ansible/inventory.ini










